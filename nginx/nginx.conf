events {
    worker_connections 1024;
}

http {
    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Web frontend
    server {
        listen 80;
        server_name web.localhost;

        location / {
            proxy_pass http://web:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }
    }

    # API backend
    server {
        listen 80;
        server_name api.localhost;

        location / {
            proxy_pass http://api:3000;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # CORS headers for API
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
            
            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }
    }

    # Admin panel
    server {
        listen 80;
        server_name admin.localhost;

        location / {
            proxy_pass http://admin:3000;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Default server for localhost (no subdomain)
    server {
        listen 80;
        server_name localhost;

        location / {
            default_type text/html;
            return 200 '<!DOCTYPE html>
<html>
<head>
    <title>Localhost Router</title>
    <style>
        body { font-family: Arial, sans-serif; padding: 40px; }
        h1 { color: #333; }
        .service { margin: 20px 0; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }
        .service h2 { margin-top: 0; }
        a { color: #0066cc; text-decoration: none; }
        a:hover { text-decoration: underline; }
        .status { display: inline-block; width: 10px; height: 10px; border-radius: 50%; margin-right: 10px; }
        .online { background-color: #4CAF50; }
    </style>
</head>
<body>
    <h1>Services Directory</h1>
    <p>All services are accessible through port 80 using subdomains:</p>
    
    <div class="service">
        <h2><span class="status online"></span>Web Frontend</h2>
        <p>Main web application interface</p>
        <a href="http://web.localhost">http://web.localhost</a>
    </div>
    
    <div class="service">
        <h2><span class="status online"></span>API Backend</h2>
        <p>RESTful API endpoints</p>
        <a href="http://api.localhost">http://api.localhost</a>
    </div>
    
    <div class="service">
        <h2><span class="status online"></span>Admin Panel</h2>
        <p>Administrative interface</p>
        <a href="http://admin.localhost">http://admin.localhost</a>
    </div>
</body>
</html>';
        }

        # Health check endpoint
        location /health {
            access_log off;
            default_type application/json;
            return 200 '{"status":"ok","timestamp":"$time_iso8601"}';
        }
    }
}
